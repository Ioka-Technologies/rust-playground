// func (s *Service) DeactivatePerson(ctx context.Context, arg input.Get) (member orgtypes.Member, err error) {
// 	member, err = s.organizationService.GetMember(ctx, arg)

// 	switch {
// 	case errors.Is(err, errors.NotFound):
// 		// user doesn't exist so we can consider them "deleted"
// 		return member, nil
// 	case err != nil:
// 		return member, err
// 	}

// 	// Deactivate managed user identity
// 	_, err = s.DeactivateMemberUserAccount(ctx, DeactivateMemberUserAccount{
// 		MemberID: member.ID,
// 	})

// 	if err != nil {
// 		return member, err
// 	}

// 	// Deleted users are stripped of all roles
// 	_, err = s.organizationService.SetMemberOrganizationRoles(ctx, organization.SetMemberOrganizationRoles{
// 		MemberID: member.ID,
// 		Roles:    []orgtypes.FmMemberOrganizationRoleType{},
// 	})
// 	if err != nil {
// 		return member, err
// 	}

// 	// Deactivate Monitoring
// 	finalMemberState, err := s.DeactivateMemberMonitoring(ctx, DeactivateMemberMonitoring{ID: member.ID})
// 	if err != nil {
// 		return member, err
// 	}

// 	serviceInput := organization.UpsertMember{}
// 	serviceInput.FromMember(*finalMemberState)
// 	serviceInput.IsDeleted = true
// 	member, err = s.organizationService.UpsertMember(ctx, serviceInput)

// 	if errors.Is(err, errors.NotFound) {
// 		// user doesn't exist so we can consider them "deleted"
// 		return member, nil
// 	}

// 	return member, err
// }